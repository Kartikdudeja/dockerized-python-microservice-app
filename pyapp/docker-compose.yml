version: '3.8'

services:

  nginx:

    image: nginx:1.23-alpine
    container_name: nginx-proxy
    hostname: nginx-proxy
    
    ports:
      - 80:80
    
    volumes:
       - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro

    depends_on:
      - pyapp

    networks:    
      custom-network:
        ipv4_address: 172.24.2.2

  pyapp:

    # container_name: pyapp
    build:
      context: .
      dockerfile: Dockerfile
      
    command: uvicorn main:app --host 0.0.0.0 --port 8000
    # command: bash -c 'while !</dev/tcp/db/5432; do sleep 1; done; uvicorn main:app --host 0.0.0.0 --port 8000'
    
    volumes:
      - ./code:/src:rw
    
    # ports:
    #   - 8000:8000
    
    expose:
      - 8000

    depends_on:
      - postgresdb
      - redisdb

    networks:
      custom-network:
    
    deploy:
      mode: replicated
      replicas: 2

  postgresdb:
    
    image: postgres:13-alpine
    container_name: psqldb
    restart: always
    
    volumes:
      - psql_data:/var/lib/postgresql/data:rw
      
    expose:
      - 5432

    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres

    networks:
      custom-network:
        ipv4_address: 172.24.2.5

  # postgresdb02:
    
  #   image: postgres:13-alpine
  #   container_name: psqldb-slave
  #   restart: always
    
  #   volumes:
  #     - psql_data:/var/lib/postgresql/data:rw
      
  #   expose:
  #     - 5432

  #   environment:
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #     - POSTGRES_DB=postgres

  #   networks:
  #     custom-network:
  #       ipv4_address: 172.24.2.6
      
  redisdb:

    container_name: redisdb
    image: redis:alpine3.16

    volumes:
      - redis_data:/data:rw

    expose:
      - 6379

    networks:
      custom-network:
        ipv4_address: 172.24.2.7

volumes:
  psql_data:
  redis_data:

networks:
  custom-network: 
    driver: bridge
    ipam:
     config:
       - subnet: 172.24.2.0/16
         gateway: 172.24.2.0